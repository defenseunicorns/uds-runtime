includes:
  - setup: ./setup.yaml

tasks:
  - name: e2e
    description: "run end-to-end tests (assumes api server is running on port 8080)"
    actions:
      - task: setup:build-ui
      - cmd: npm run test:install # install playwright
        dir: ui
      - task: setup:build-api
      - task: k3d
      - task: deploy-load
      - cmd: npm run test:integration
        dir: ui

  - name: go
    description: "run api server unit tests"
    actions:
      - cmd:  go test -failfast -v -timeout 30m --tags=unit ./...

  - name: ui-unit
    description: "run frontend unit tests"
    actions:
      - cmd: npm ci && npm run test:unit
        dir: ui

  - name: unit
    description: "run all unit tests (backend and frontend)"
    actions:
      - task: setup:build-ui
        description: "build ui since embedded in main.go"
      - task: go
      - task: ui-unit

  - name: api
    description: "run api server tests"
    actions:
      - description: "build ui since embedded in main.go"
        task: setup:build-ui
      - task: k3d
      - task: deploy-load
      - cmd: go test -failfast -v -timeout 30m --tags=integration ./...

  - name: deploy-load
    description: "deploy some Zarf packages to test against"
    actions:
      - task: deploy-min-core
      - cmd: uds zarf dev deploy
        dir: ui/tests/packages/podinfo

  - name: deploy-min-core
    description: install min resources for UDS Core
    actions:
      - cmd: rm -fr tmp && git clone --depth=1 https://github.com/defenseunicorns/uds-core.git tmp/uds-core
        description: clone UDS Core
      - cmd: npm ci && npx pepr deploy --confirm
        description: deploy UDS Core's Pepr module
        dir: tmp/uds-core
      - cmd: |
          helm repo add istio https://istio-release.storage.googleapis.com/charts
          helm install istio-base istio/base -n istio-system --set defaultRevision=default --create-namespace
        description: install Istio CRDs

  - name: k3d
    description: "start a k3d cluster"
    actions:
      - cmd: |
          k3d cluster delete runtime && k3d cluster create runtime --k3s-arg "--disable=traefik@server:*" --k3s-arg "--disable=servicelb@server:*"
